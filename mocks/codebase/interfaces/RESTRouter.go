// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	interfaces "github.com/golangid/candi/codebase/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// RESTRouter is an autogenerated mock type for the RESTRouter type
type RESTRouter struct {
	mock.Mock
}

// CONNECT provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) CONNECT(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// DELETE provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) DELETE(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// GET provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) GET(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Group provides a mock function with given fields: pattern, middlewares
func (_m *RESTRouter) Group(pattern string, middlewares ...func(http.Handler) http.Handler) interfaces.RESTRouter {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 interfaces.RESTRouter
	if rf, ok := ret.Get(0).(func(string, ...func(http.Handler) http.Handler) interfaces.RESTRouter); ok {
		r0 = rf(pattern, middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.RESTRouter)
		}
	}

	return r0
}

// HEAD provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) HEAD(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HandleFunc provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) HandleFunc(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// OPTIONS provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) OPTIONS(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// PATCH provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) PATCH(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// POST provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) POST(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// PUT provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) PUT(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TRACE provides a mock function with given fields: pattern, h, middlewares
func (_m *RESTRouter) TRACE(pattern string, h http.HandlerFunc, middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, pattern, h)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Use provides a mock function with given fields: middlewares
func (_m *RESTRouter) Use(middlewares ...func(http.Handler) http.Handler) {
	_va := make([]any, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []any
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewRESTRouter creates a new instance of RESTRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRESTRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RESTRouter {
	mock := &RESTRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
