// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *Tracer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Finish provides a mock function with given fields: additionalTags
func (_m *Tracer) Finish(additionalTags ...map[string]any) {
	_va := make([]any, len(additionalTags))
	for _i := range additionalTags {
		_va[_i] = additionalTags[_i]
	}
	var _ca []any
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// InjectGRPCMetadata provides a mock function with given fields: md
func (_m *Tracer) InjectGRPCMetadata(md metadata.MD) {
	_m.Called(md)
}

// InjectHTTPHeader provides a mock function with given fields: req
func (_m *Tracer) InjectHTTPHeader(req *http.Request) {
	_m.Called(req)
}

// InjectRequestHeader provides a mock function with given fields: header
func (_m *Tracer) InjectRequestHeader(header map[string]string) {
	_m.Called(header)
}

// Log provides a mock function with given fields: key, value
func (_m *Tracer) Log(key string, value any) {
	_m.Called(key, value)
}

// SetError provides a mock function with given fields: err
func (_m *Tracer) SetError(err error) {
	_m.Called(err)
}

// SetTag provides a mock function with given fields: key, value
func (_m *Tracer) SetTag(key string, value any) {
	_m.Called(key, value)
}

// Tags provides a mock function with given fields:
func (_m *Tracer) Tags() map[string]any {
	ret := _m.Called()

	var r0 map[string]any
	if rf, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}

	return r0
}
