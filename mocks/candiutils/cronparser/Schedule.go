// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Schedule is an autogenerated mock type for the Schedule type
type Schedule struct {
	mock.Mock
}

// Next provides a mock function with given fields: _a0
func (_m *Schedule) Next(_a0 time.Time) time.Time {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(time.Time) time.Time); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// NextInterval provides a mock function with given fields: _a0
func (_m *Schedule) NextInterval(_a0 time.Time) time.Duration {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NewSchedule creates a new instance of Schedule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchedule(t interface {
	mock.TestingT
	Cleanup(func())
}) *Schedule {
	mock := &Schedule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
