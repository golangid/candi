// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	candiutils "github.com/golangid/candi/candiutils"

	mock "github.com/stretchr/testify/mock"
)

// HTTPRequest is an autogenerated mock type for the HTTPRequest type
type HTTPRequest struct {
	mock.Mock
}

// Do provides a mock function with given fields: _a0, method, url, reqBody, headers
func (_m *HTTPRequest) Do(_a0 context.Context, method string, url string, reqBody []byte, headers map[string]string) ([]byte, int, error) {
	ret := _m.Called(_a0, method, url, reqBody, headers)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, map[string]string) ([]byte, int, error)); ok {
		return rf(_a0, method, url, reqBody, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, map[string]string) []byte); ok {
		r0 = rf(_a0, method, url, reqBody, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, map[string]string) int); ok {
		r1 = rf(_a0, method, url, reqBody, headers)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, []byte, map[string]string) error); ok {
		r2 = rf(_a0, method, url, reqBody, headers)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DoRequest provides a mock function with given fields: ctx, method, url, requestBody, headers
func (_m *HTTPRequest) DoRequest(ctx context.Context, method string, url string, requestBody []byte, headers map[string]string) (*candiutils.HTTPRequestResult, error) {
	ret := _m.Called(ctx, method, url, requestBody, headers)

	if len(ret) == 0 {
		panic("no return value specified for DoRequest")
	}

	var r0 *candiutils.HTTPRequestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, map[string]string) (*candiutils.HTTPRequestResult, error)); ok {
		return rf(ctx, method, url, requestBody, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, map[string]string) *candiutils.HTTPRequestResult); ok {
		r0 = rf(ctx, method, url, requestBody, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*candiutils.HTTPRequestResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, map[string]string) error); ok {
		r1 = rf(ctx, method, url, requestBody, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHTTPRequest creates a new instance of HTTPRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPRequest {
	mock := &HTTPRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
