// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	tracer "github.com/golangid/candi/tracer"
	mock "github.com/stretchr/testify/mock"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *Tracer) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Finish provides a mock function with given fields: opts
func (_m *Tracer) Finish(opts ...tracer.FinishOptionFunc) {
	_va := make([]any, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []any
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// InjectRequestHeader provides a mock function with given fields: header
func (_m *Tracer) InjectRequestHeader(header map[string]string) {
	_m.Called(header)
}

// Log provides a mock function with given fields: key, value
func (_m *Tracer) Log(key string, value any) {
	_m.Called(key, value)
}

// NewContext provides a mock function with given fields:
func (_m *Tracer) NewContext() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// SetError provides a mock function with given fields: err
func (_m *Tracer) SetError(err error) {
	_m.Called(err)
}

// SetTag provides a mock function with given fields: key, value
func (_m *Tracer) SetTag(key string, value any) {
	_m.Called(key, value)
}

// NewTracer creates a new instance of Tracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tracer {
	mock := &Tracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
